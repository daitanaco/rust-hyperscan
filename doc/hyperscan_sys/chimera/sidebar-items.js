initSidebarItems({"constant":[["CH_BAD_ALIGN",""],["CH_BAD_ALLOC",""],["CH_CALLBACK_CONTINUE",""],["CH_CALLBACK_SKIP_PATTERN",""],["CH_CALLBACK_TERMINATE",""],["CH_CAPTURE_FLAG_ACTIVE",""],["CH_CAPTURE_FLAG_INACTIVE",""],["CH_COMPILER_ERROR",""],["CH_DB_MODE_ERROR",""],["CH_DB_PLATFORM_ERROR",""],["CH_DB_VERSION_ERROR",""],["CH_ERROR_MATCHLIMIT",""],["CH_ERROR_RECURSIONLIMIT",""],["CH_FAIL_INTERNAL",""],["CH_FLAG_CASELESS",""],["CH_FLAG_DOTALL",""],["CH_FLAG_MULTILINE",""],["CH_FLAG_SINGLEMATCH",""],["CH_FLAG_UCP",""],["CH_FLAG_UTF8",""],["CH_INVALID",""],["CH_MODE_GROUPS",""],["CH_MODE_NOGROUPS",""],["CH_NOMEM",""],["CH_SCAN_TERMINATED",""],["CH_SCRATCH_IN_USE",""],["CH_SUCCESS",""],["CH_UNKNOWN_HS_ERROR",""]],"fn":[["ch_alloc_scratch","Allocate a “scratch” space for use by Chimera."],["ch_clone_scratch","Allocate a scratch space that is a clone of an existing scratch space."],["ch_compile","The basic regular expression compiler."],["ch_compile_ext_multi","The multiple regular expression compiler with extended match limits support."],["ch_compile_multi","The multiple regular expression compiler."],["ch_database_info","Utility function providing information about a database."],["ch_database_size","Returns the size of the given database."],["ch_free_compile_error","Free an error structure generated by @ref ch_compile(), @ref ch_compile_multi()."],["ch_free_database","Free a compiled pattern database."],["ch_free_scratch","Free a scratch block previously allocated by @ref ch_alloc_scratch() or @ref ch_clone_scratch()."],["ch_scan","The block regular expression scanner."],["ch_scratch_size","Provides the size of the given scratch space."],["ch_set_allocator","Set the allocate and free functions used by Chimera for allocating memory at runtime for stream state, scratch space, database bytecode, and various other data structure returned by the Chimera API."],["ch_set_database_allocator","Set the allocate and free functions used by Chimera for allocating memory for database bytecode produced by the compile calls (@ref ch_compile() and @ref ch_compile_multi())."],["ch_set_misc_allocator","Set the allocate and free functions used by Chimera for allocating memory for items returned by the Chimera API such as @ref ch_compile_error_t."],["ch_set_scratch_allocator","Set the allocate and free functions used by Chimera for allocating memory for scratch space by @ref ch_alloc_scratch() and @ref ch_clone_scratch()."],["ch_version","Utility function for identifying this release version."]],"struct":[["ch_capture","Structure representing a captured subexpression within a match. An array of these structures corresponding to capture groups in order is passed to the callback on match, with active structures identified by the CH_CAPTURE_FLAG_ACTIVE flag."],["ch_compile_error","A type containing error details that is returned by the compile calls (@ref ch_compile() and @ref ch_compile_multi() on failure. The caller may inspect the values returned in this type to determine the cause of failure."],["ch_database",""],["ch_scratch",""],["hs_platform_info","A type containing information on the target platform which may optionally be provided to the compile calls (@ref hs_compile(), @ref hs_compile_multi(), @ref hs_compile_ext_multi())."]],"type":[["ch_alloc_t","The type of the callback function that will be used by Chimera to allocate more memory at runtime as required."],["ch_callback_t","Callback return value used to tell the Chimera matcher what to do after processing this match."],["ch_capture_t","Structure representing a captured subexpression within a match. An array of these structures corresponding to capture groups in order is passed to the callback on match, with active structures identified by the CH_CAPTURE_FLAG_ACTIVE flag."],["ch_compile_error_t","A type containing error details that is returned by the compile calls (@ref ch_compile() and @ref ch_compile_multi() on failure. The caller may inspect the values returned in this type to determine the cause of failure."],["ch_database_t","A Chimera pattern database."],["ch_error_event_handler","Definition of the Chimera error event callback function type."],["ch_error_event_t","Type used to differentiate the errors raised with the @ref ch_error_event_handler callback."],["ch_error_t","A type for errors returned by Chimera functions."],["ch_free_t","The type of the callback function that will be used by Chimera to free memory regions previously allocated using the @ref ch_alloc_t function."],["ch_match_event_handler","Definition of the match event callback function type."],["ch_scratch_t","A Chimera scratch space."],["hs_platform_info_t","A type containing information on the target platform which may optionally be provided to the compile calls (@ref hs_compile(), @ref hs_compile_multi(), @ref hs_compile_ext_multi())."]]});