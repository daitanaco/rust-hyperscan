var searchIndex = JSON.parse('{\
"hyperscan":{"doc":"Hyperscan is a high-performance regular expression …","t":[18,18,18,13,13,13,6,4,13,8,18,13,13,3,13,13,3,3,8,3,13,13,13,16,16,4,16,13,3,3,13,13,13,4,13,13,13,13,13,13,13,13,3,3,3,18,8,4,13,8,13,13,13,3,3,3,3,3,6,18,18,13,13,3,13,3,8,13,13,13,13,4,3,3,6,4,13,4,13,13,6,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,0,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,12,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,12,12,12,12,12,12,12,12,12,13,13,8,18,3,13,3,13,13,13,18,3,3,13,13,13,16,4,8,13,3,13,13,18,4,8,13,4,4,13,13,3,3,13,18,13,3,13,3,13,13,18,18,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,13,13,8,3,13,13,13,13,3,3,13,13,13,16,4,13,13,4,13,3,3,13,3,13,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,18,6,8,18,18,3,13,18,3,16,18,18,18,18,4,8,18,18,18,18,3,3,18,18,18,3,3,6,13,18,18,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AVX2","AVX512","AVX512VBMI","ArchError","BadAlign","BadAlloc","BlockDatabase","BlockMode","Broadwell","Builder","CASELESS","Chimera","Code","CompileError","CompileError","Continue","CpuFeatures","Database","DatabaseBuilder","DatabaseRef","DbModeError","DbPlatformError","DbVersionError","Err","Err","Error","Error","Expr","ExprExt","ExprInfo","Generic","Goldmont","Haswell","HsError","Hyperscan","Icelake","IcelakeServer","InsufficientSpace","Invalid","InvalidFlag","IvyBridge","Large","Literal","LiteralFlags","Literals","MULTILINE","MatchEventHandler","Matching","Medium","Mode","NoMem","NulByte","ParseInt","Pattern","PatternFlags","Patterns","Platform","PlatformRef","Result","SINGLEMATCH","SOM_LEFTMOST","SandyBridge","ScanTerminated","Scratch","ScratchInUse","ScratchRef","SerializedDatabase","Silvermont","Skylake","SkylakeServer","Small","SomHorizon","Stream","StreamRef","StreamingDatabase","StreamingMode","Terminate","Tune","UnknownError","Utf8","VectoredDatabase","VectoredMode","all","all","alloc","alloc_scratch","as_mut","as_ptr","as_ptr","as_ptr","as_ref","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","caseless","chimera","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","compile","complement","complement","compress","contains","contains","default","default","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize_at","difference","difference","drop","drop","drop","edit_distance","empty","empty","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","expand_stream","expression","expression","expression","ext","extend","extend","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_platform","for_platform","for_platform","for_platform","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","from_iter","from_ptr","from_ptr","from_ptr","from_str","from_str","from_str","from_str","hamming_distance","hash","hash","host","id","id","id","index","index_mut","info","info","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","is_all","is_all","is_empty","is_empty","is_empty","is_valid","left_most","literal","literals","max_offset","message","min_length","min_offset","multi_line","name","ne","ne","ne","ne","ne","ne","new","new","not","not","open_stream","partial_cmp","partial_cmp","partial_cmp","pattern","patterns","prelude","realloc","realloc_scratch","regex","remove","remove","reset","reset_and_copy_stream","reset_and_expand","scan","scan","scan","scan","serialize","set","set","set_edit_distance","set_hamming_distance","set_max_offset","set_min_length","set_min_offset","single_match","size","size","size","som","som","source","split","stream_size","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","version","version_str","with_flags","0","0","0","0","0","0","0","0","0","BadAlign","BadAlloc","Builder","CASELESS","Capture","Code","CompileError","CompileError","CompilerError","Continue","DOTALL","Database","DatabaseRef","DbModeError","DbPlatformError","DbVersionError","Err","Error","ErrorEventHandler","FailInternal","Flags","Groups","Invalid","MULTILINE","MatchError","MatchEventHandler","MatchLimit","Matching","Mode","NoGroups","NoMem","Pattern","Patterns","RecursionLimit","SINGLEMATCH","ScanTerminated","Scratch","ScratchInUse","ScratchRef","Skip","Terminate","UCP","UTF8","UnknownError","UnknownHSError","all","as_ptr","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","compile","complement","contains","default","default","deref","deref_mut","difference","drop","empty","eq","eq","eq","eq","expression","expression","extend","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_platform","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_ptr","from_str","hash","id","insert","intersection","intersects","into","into","into","into","is_all","is_empty","message","ne","not","partial_cmp","prelude","remove","set","split","split","sub","sub_assign","symmetric_difference","to_owned","to_owned","to_owned","to_string","to_string","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","version","0","0","BadAlign","BadAlloc","Builder","Capture","Code","CompileError","CompilerError","Continue","Database","DatabaseRef","DbModeError","DbPlatformError","DbVersionError","Err","Error","FailInternal","Invalid","Matching","NoMem","Pattern","Patterns","ScanTerminated","Scratch","ScratchInUse","ScratchRef","Skip","Terminate","UnknownError","UnknownHSError","alloc_scratch","as_mut","as_mut","as_ptr","as_ptr","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","caseless","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","compile","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","dot_all","drop","drop","eq","eq","eq","eq","expression","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_platform","for_platform","for_platform","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_ptr","from_ptr","from_str","from_str","from_str","id","index","index_mut","info","into","into","into","into","into","into","into","into","into","into_iter","is_active","multi_line","ne","ne","ne","new","range","realloc_scratch","scan","single_match","size","size","split","split","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ucp","utf8","with_flags","with_groups","with_groups","with_groups","0","0","ALLOWEMPTY","BlockDatabase","Builder","CASELESS","COMBINATION","CompileFlags","Continue","DOTALL","Database","Err","ID","ID","ID","MULTILINE","Matching","Mode","NAME","NAME","NAME","PREFILTER","Pattern","Patterns","QUIET","SINGLEMATCH","SOM_LEFTMOST","Scratch","Stream","StreamingDatabase","Terminate","UCP","UTF8","VectoredDatabase","all","allow_empty","as_mut","as_mut","as_mut","as_ptr","as_ptr","as_ptr","as_ref","as_ref","as_ref","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","build","caseless","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","close","cmp","combination","compile","compile","compile_literal","complement","contains","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","difference","dot_all","drop","drop","drop","empty","eq","eq","eq","expression","ext","extend","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_platform","for_platform","for_platform","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_iter","from_ptr","from_ptr","from_ptr","from_str","from_str","from_str","from_str","hash","id","index","index_mut","info","insert","intersection","intersects","into","into","into","into","into","into","into","into_iter","is_all","is_block","is_block","is_block","is_empty","is_streaming","is_streaming","is_streaming","is_vectored","is_vectored","is_vectored","left_most","multi_line","ne","ne","new","not","partial_cmp","prefilter","quiet","remove","set","single_match","som","split","sub","sub_assign","symmetric_difference","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ucp","union","utf8","with_flags","Regex","RegexBuilder","RegexSetBuilder","borrow","borrow_mut","clone","clone_into","find","find_iter","from","from_str","into","is_match","new","split","splitn","to_owned","try_from","try_into","type_id"],"q":["hyperscanhyperscan::Error","","","","","","","hyperscan::HsError","","hyperscan::chimera","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hyperscan::chimera::Error","","hyperscan::chimera::preludehyperscan::chimera::prelude::Error","","hyperscan::preludehyperscan::regex","","","","","","","","","","","","","","","","","","",""],"d":["Intel(R) Advanced Vector Extensions 2 (Intel(R) AVX2)","Intel(R) Advanced Vector Extensions 512 (Intel(R) AVX512)","Intel(R) Advanced Vector Extensions 512 Vector Byte …","Unsupported CPU architecture.","A parameter passed to this function was not correctly …","The memory allocator did not correctly return memory …","Block scan (non-streaming) database.","Block scan (non-streaming) database.","Intel(R) microarchitecture code name Broadwell","The regular expression pattern database builder.","Matching will be performed case-insensitively.","Chimera error","Unknown error code","Providing details of the compile error condition.","The pattern compiler failed with more detail.","The matching should continue","CPU feature support flags","A compiled pattern database that can then be used to scan …","The regular expression pattern database builder.","A borrowed reference to a <code>Database</code>.","The given database was built for a different mode of …","The given database was built for a different platform …","The given database was built for a different version of …","The associated error which can be returned from compiling.","The associated error which can be returned from compiling.","Hyperscan Error","The type of error if it fails in a normal fashion.","Expression error","A structure containing additional parameters related to an …","A type containing information related to an expression","Generic","Intel(R) microarchitecture code name Goldmont","Intel(R) microarchitecture code name Haswell","Hyperscan Error Codes","Hyperscan error","Intel(R) microarchitecture code name Icelake","Intel(R) microarchitecture code name Icelake Server","Provided buffer was too small.","A parameter passed to this function was invalid.","Invalid flag","Intel(R) microarchitecture code name Ivy Bridge","use full precision to track start of match offsets in …","The pattern with pure literal expression.","Literal flags","Vec of <code>Literal</code>","<code>^</code> and <code>$</code> anchors match any newlines in data.","Definition of the match event callback function type.","Indicating whether or not matching should continue on the …","use medium precision to track start of match offsets in …","Compile mode","A memory allocation failed.","Parse C string error","Parse integer error","The pattern with basic regular expression.","Pattern flags","Vec of <code>Pattern</code>","A type containing information on the target platform which …","A borrowed reference to a <code>Platform</code>.","The type returned by hyperscan methods.","Only one match will be generated for the expression per …","Report the leftmost start of match offset when a match is …","Intel(R) microarchitecture code name Sandy Bridge","The engine was terminated by callback.","A large enough region of scratch space to support a given …","The scratch region was already in use.","A borrowed reference to a <code>Scratch</code>.","A serialized database","Intel(R) microarchitecture code name Silvermont","Intel(R) microarchitecture code name Skylake","Intel(R) microarchitecture code name Skylake Server","use limited precision to track start of match offsets in …","Defines the precision to track start of match offsets in …","A pattern matching state can be maintained across multiple …","A borrowed reference to a <code>Stream</code>.","Streaming database.","Streaming database.","The matching should cease","Tuning Parameter","Unexpected internal error.","Invalid UTF-8 string","Vectored scanning database.","Vectored scanning database.","Returns the set containing all flags.","Returns the set containing all flags.","Allocate a “scratch” space for use by Hyperscan.","Allocate a “scratch” space for use by Hyperscan.","","","","","","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set case-insensitive matching.","Chimera is a software regular expression matching engine …","","","","","","","","","","","","","","","","","","Compile an expression into a Hyperscan database.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Creates a compressed representation of the provided stream …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","","","","","","","Reconstruct a pattern database from a stream of bytes …","Reconstruct a pattern database from a stream of bytes …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","","Allow patterns to approximately match within this edit …","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","Decompresses a compressed representation created by …","The zero-based number of the expression that caused the …","The expression to parse.","The expression to parse.","Extended behaviour for this pattern","","","Flags which modify the behaviour of the expression.","Flags which modify the behaviour of the expression.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Build an expression is compiled into a Hyperscan database …","Build an expression is compiled into a Hyperscan database …","The basic regular expression compiler.","The multiple regular expression compiler.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","Allow patterns to approximately match within this Hamming …","","","Populates the platform information based on the current …","Provides the id of compiled mode of the given database.","ID number to be associated with the corresponding pattern …","ID number to be associated with the corresponding literal …","","","Providing information about a serialized database.","Utility function providing information about a database.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns true if the expression contains no additional …","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Utility function to test the current system architecture.","Report the leftmost start of match offset when a match is …","Define <code>Literal</code> with flags","Define multi <code>Literal</code> with flags and ID","The maximum end offset in the data stream at which this …","A human-readable error message describing the error.","The minimum match length (from start to end) required to …","The minimum end offset in the data stream at which this …","Set multi-line anchoring.","Provides the name of compiled mode of the given database.","","","","","","","Construct a literal with expression.","Constructs a target platform which may be used to guide …","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Open and initialise a stream.","","","","Define <code>Pattern</code> with flags","Define multi <code>Pattern</code> with flags and ID","The <code>hyperscan</code> Prelude","Reallocate a “scratch” space for use by Hyperscan.","Reallocate a “scratch” space for use by Hyperscan.","Regex compatible interface","Removes the specified flags in-place.","Removes the specified flags in-place.","Reset a stream to an initial state.","Duplicate the given <code>from</code> stream state onto the stream.","Decompresses a compressed representation created by …","Pattern matching takes place for stream-mode pattern …","The vectored regular expression scanner.","The block (non-streaming) regular expression scanner.","Write data to be scanned to the opened stream.","Serialize a pattern database to a stream of bytes.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Sets the value that allow patterns to approximately match …","Sets the value that allow patterns to approximately match …","Sets the value for the maximum end offset in the data …","Sets the value for the minimum match length (from start to …","Sets the value for the minimum end offset in the data …","Set single-match only mode.","Reporting the size that would be required by a database if …","Provides the size of the given database in bytes.","Provides the size of the given scratch space.","The precision to track start of match offsets in stream …","The precision to track start of match offsets in stream …","","Split the match event handler to callback and userdata.","Provides the size of the stream state allocated by a …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","The current Hyperscan version information.","Utility function for identifying this release version.","Construct a literal with expression and flags.","","","","","","","","","","A parameter passed to this function was not correctly …","The memory allocator did not correctly return memory …","The regular expression pattern database builder.","Set case-insensitive matching.","Structure representing a captured subexpression within a …","Unknown error code","Providing details of the compile error condition.","The pattern compiler failed, and the <code>ch_compile_error_t</code> …","The pattern compiler failed.","Continue matching.","Matching a <code>.</code> will not exclude newlines.","A compiled pattern database that can then be used to scan …","A borrowed reference to a <code>Database</code>.","The given database was built for a different mode of …","The given database was built for a different platform …","The given database was built for a different version of …","The associated error which can be returned from compiling.","A type for errors returned by Chimera functions.","Definition of the Chimera error event callback function …","Returned when pcre_exec (called for some expressions …","Pattern flags","Enable capturing groups.","A parameter passed to this function was invalid.","Set multi-line anchoring.","The type of error event that occurred.","Definition of the match event callback function type.","PCRE hits its match limit.","Callback return value used to tell the Chimera matcher …","Compile mode flags","Disable capturing groups.","A memory allocation failed.","The pattern with basic regular expression.","Vec of <code>Pattern</code>","PCRE hits its recursion limit.","Set single-match only mode.","The engine was terminated by callback.","A large enough region of scratch space to support a given …","The scratch region was already in use.","A borrowed reference to a <code>Scratch</code>.","Skip remaining matches for this ID and continue.","Terminate matching.","Enable Unicode property support for this expression.","Enable UTF-8 mode for this expression.","Unexpected internal error from Hyperscan.","Unexpected internal error from Hyperscan.","Returns the set containing all flags.","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","Compile an expression into a Chimera database.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","Returns an empty set of flags.","","","","","The zero-based number of the expression that caused the …","The expression to parse.","","Flags which modify the behaviour of the expression.","","","","","","","","","","","Build an expression is compiled into a Chimera database …","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","ID number to be associated with the corresponding pattern …","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","A human-readable error message describing the error.","","Returns the complement of this set of flags.","","The <code>chimera</code> Prelude","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Split the match event handler to callback and userdata.","Split the match event handler to callback and userdata.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Utility function for identifying this release version.","","","A parameter passed to this function was not correctly …","The memory allocator did not correctly return memory …","The regular expression pattern database builder.","Structure representing a captured subexpression within a …","Unknown error code","The pattern compiler failed, and the <code>ch_compile_error_t</code> …","The pattern compiler failed.","Continue matching.","A compiled pattern database that can then be used to scan …","A borrowed reference to a <code>Database</code>.","The given database was built for a different mode of …","The given database was built for a different platform …","The given database was built for a different version of …","The associated error which can be returned from compiling.","A type for errors returned by Chimera functions.","Returned when pcre_exec (called for some expressions …","A parameter passed to this function was invalid.","Callback return value used to tell the Chimera matcher …","A memory allocation failed.","The pattern with basic regular expression.","Vec of <code>Pattern</code>","The engine was terminated by callback.","A large enough region of scratch space to support a given …","The scratch region was already in use.","A borrowed reference to a <code>Scratch</code>.","Skip remaining matches for this ID and continue.","Terminate matching.","Unexpected internal error from Hyperscan.","Unexpected internal error from Hyperscan.","Allocate a <code>scratch</code> space for use by Chimera.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Build an expression is compiled into a Chimera database …","Build an expression is compiled into a Chimera database …","Build an expression is compiled into a Chimera database …","Set case-insensitive matching.","","","","","","","","","","","Compile an expression into a Chimera database.","","","","","","","","","Matching a <code>.</code> will not exclude newlines.","","","","","","","The expression to parse.","Flags which modify the behaviour of the expression.","","","","","","","","Build an expression is compiled into a Chimera database …","The basic regular expression compiler.","The multiple regular expression compiler.","","","","","","","","","","","","","","","","","","","ID number to be associated with the corresponding pattern …","","","Utility function providing information about a database.","","","","","","","","","","","Indicating that a particular capture group is active","Set multi-line anchoring.","","","","Construct a pattern with expression.","Returns the range of capture group","Reallocate a <code>scratch</code> space for use by Chimera.","The block regular expression scanner.","Set single-match only mode.","Returns the size of the given database.","Provides the size of the given scratch space.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Enable Unicode property support for this expression.","Enable UTF-8 mode for this expression.","Construct a pattern with expression and flags.","Build an expression is compiled into a Chimera database …","Build an expression is compiled into a Chimera database …","Build an expression is compiled into a Chimera database …","","","Allow expressions that can match against empty buffers.","Block scan (non-streaming) database.","The regular expression pattern database builder.","Set case-insensitive matching.","Logical combination.","Pattern flags","The matching should continue","Matching a <code>.</code> will not exclude newlines.","A compiled pattern database that can then be used to scan …","The associated error which can be returned from compiling.","Id of mode","Id of mode","Id of mode","Set multi-line anchoring.","Indicating whether or not matching should continue on the …","Compile mode","Name of mode","Name of mode","Name of mode","Enable prefiltering mode for this expression.","The pattern with basic regular expression.","Vec of <code>Pattern</code>","Don’t do any match reporting.","Set single-match only mode.","Enable leftmost start of match reporting.","A large enough region of scratch space to support a given …","A pattern matching state can be maintained across multiple …","Streaming database.","The matching should cease","Enable Unicode property support for this expression.","Enable UTF-8 mode for this expression.","Vectored scanning database.","Returns the set containing all flags.","Allow expressions that can match against empty buffers.","","","","","","","","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","Build an expression is compiled into a Hyperscan database …","Build an expression is compiled into a Hyperscan database …","Build an expression is compiled into a Hyperscan database …","Build an expression is compiled into a Hyperscan database …","Set case-insensitive matching.","","","","","","","","","","","","","Close a stream.","","Logical combination.","Compile an expression into a Hyperscan database.","The basic regular expression compiler.","The pure literal expression compiler.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Matching a <code>.</code> will not exclude newlines.","","","","Returns an empty set of flags.","","","","The expression to parse.","Extended behaviour for this pattern","","Flags which modify the behaviour of the expression.","","","","","","","","","","","Build an expression is compiled into a Hyperscan database …","The basic regular expression compiler.","The multiple regular expression compiler.","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","ID number to be associated with the corresponding pattern …","","","Utility function providing information about a regular …","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","Returns <code>true</code> if all flags are currently set.","The given database is a block database.","The given database is a block database.","The given database is a block database.","Returns <code>true</code> if no flags are currently stored.","The given database is a block database.","The given database is a block database.","The given database is a block database.","The given database is a block database.","The given database is a block database.","The given database is a block database.","Report the leftmost start of match offset when a match is …","Set multi-line anchoring.","","","Construct a pattern with expression.","Returns the complement of this set of flags.","","Enable prefiltering mode for this expression.","Don’t do any match reporting.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Set single-match only mode.","The precision to track start of match offsets in stream …","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","Enable Unicode property support for this expression.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Enable UTF-8 mode for this expression.","Construct a pattern with expression and flags.","A compiled regular expression for matching Unicode strings.","A configurable builder for a regular expression.","A configurable builder for a set of regular expressions.","","","","","Returns the start and end byte range of the leftmost-first …","Returns an iterator for each successive non-overlapping …","","Attempts to parse a string into a regular expression","","Returns true if and only if the regex matches the string …","Compiles a regular expression. Once compiled, it can be …","Returns an iterator of substrings of <code>text</code> delimited by a …","Returns an iterator of at most <code>limit</code> substrings of <code>text</code> …","","","",""],"i":[1,1,1,2,2,2,0,0,3,0,4,5,2,0,2,6,0,0,0,0,2,2,2,7,7,0,8,5,0,0,3,3,3,0,5,3,3,2,2,5,3,9,0,0,0,4,0,0,9,0,2,5,5,0,0,0,0,0,0,4,4,3,2,0,2,0,0,3,3,3,9,0,0,0,0,0,6,0,2,5,0,0,4,1,10,10,11,12,13,11,11,4,1,4,1,4,1,4,1,4,1,4,1,4,1,10,2,14,15,16,5,12,9,17,13,4,18,19,3,1,11,11,20,21,22,10,2,14,15,16,5,12,9,17,13,4,18,19,3,1,11,11,20,21,22,18,0,9,17,4,18,19,3,1,9,17,4,18,19,3,1,9,4,1,0,4,1,22,4,1,17,4,3,1,12,13,19,11,12,13,19,11,8,10,4,1,12,13,11,17,4,1,2,14,15,16,5,12,9,17,4,18,3,1,10,12,23,18,23,4,1,23,18,2,2,14,15,16,5,5,12,12,9,17,17,13,4,4,4,4,4,4,18,18,19,3,1,1,1,1,1,7,7,18,19,10,2,2,14,15,16,5,5,5,5,5,5,12,9,17,17,13,4,18,19,19,3,1,11,20,21,22,4,1,4,1,4,1,4,19,1,12,13,11,17,4,18,19,17,4,1,11,10,23,18,19,19,8,10,4,1,4,1,4,1,10,2,14,15,16,5,12,9,17,13,4,18,19,3,1,11,20,21,22,19,4,1,17,4,1,11,18,0,0,17,12,17,17,18,10,2,5,17,4,18,1,18,11,4,1,10,9,4,1,0,0,0,10,10,0,4,1,22,22,22,10,10,10,22,10,4,1,17,17,17,17,17,18,8,10,21,23,18,5,24,10,4,1,4,1,4,1,9,17,4,18,19,3,1,21,22,2,5,12,17,4,18,4,1,10,2,14,15,16,5,12,9,17,13,4,18,19,3,1,11,20,21,22,10,2,14,15,16,5,12,9,17,13,4,18,19,3,1,11,20,21,22,10,2,14,15,16,5,12,9,17,13,4,18,19,3,1,11,20,21,22,4,1,0,0,18,25,26,27,28,29,30,31,32,33,34,34,0,35,0,34,0,34,34,36,35,0,0,34,34,34,37,0,0,34,0,38,34,35,0,0,39,0,0,38,34,0,0,39,35,34,0,34,0,36,36,35,35,34,34,35,40,35,35,35,35,35,35,35,40,38,35,39,40,38,35,39,38,35,39,38,35,39,35,0,35,35,38,35,40,40,35,40,35,40,38,35,39,40,41,35,41,40,40,38,35,35,35,35,35,35,39,37,40,38,35,39,35,35,35,35,40,35,35,41,35,35,35,40,38,35,39,35,35,40,35,35,35,0,35,35,42,43,35,35,35,38,35,39,40,35,35,40,38,35,39,40,38,35,39,40,38,35,39,35,0,44,45,34,34,0,0,34,34,34,36,0,0,34,34,34,37,0,34,34,0,34,0,0,34,0,34,0,36,36,34,34,46,47,48,47,48,47,48,47,47,46,34,41,49,48,48,50,36,51,47,47,46,34,41,49,48,48,50,36,51,37,37,37,41,41,49,48,36,51,41,49,48,36,51,0,36,47,49,48,51,47,49,48,41,47,48,34,41,36,51,41,41,34,34,41,41,49,36,51,37,41,49,47,46,34,34,41,49,49,48,50,36,51,51,49,47,48,47,41,49,41,49,49,46,47,46,34,41,49,48,50,36,51,49,51,41,34,41,51,41,51,46,46,41,46,50,36,36,41,49,48,50,36,51,34,41,47,46,34,41,49,48,50,36,51,47,46,34,41,49,48,50,36,51,47,46,34,41,49,48,50,36,51,41,41,41,37,37,37,44,45,52,0,0,52,52,0,6,52,0,7,53,53,53,52,0,0,53,53,53,52,0,0,52,52,52,0,0,0,6,52,52,0,52,23,54,55,56,54,55,56,54,55,56,52,52,52,52,52,52,52,54,54,52,23,57,6,55,55,56,56,54,54,52,23,57,6,55,55,56,56,7,7,7,7,23,52,23,57,6,55,56,52,23,57,6,55,56,56,52,23,0,54,54,52,52,52,6,54,57,55,56,54,57,55,56,52,23,54,55,56,52,52,23,6,23,23,52,23,52,52,52,52,52,52,23,23,57,6,7,23,57,54,52,23,57,57,6,55,56,52,52,52,52,57,54,55,56,54,52,23,57,52,23,57,57,23,52,52,52,54,52,23,57,6,55,56,57,52,53,53,53,52,53,53,53,53,53,53,23,23,52,23,23,52,52,23,23,52,52,23,23,6,52,52,52,52,23,57,6,55,56,52,23,52,54,52,23,57,6,55,56,54,52,23,57,6,55,56,54,52,23,57,6,55,56,23,52,23,23,0,0,0,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],[["scratch",3],["result",6,["scratch"]]]],[[],[["scratch",3],["result",6,["scratch"]]]],[[],["platformref",3]],[[]],[[]],[[]],[[],["platformref",3]],[[]],[[]],[[]],[[]],[[["flags",3]]],[[["cpufeatures",3]]],[[]],[[]],[[],["u32",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["platformref",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["platformref",3]],[[]],[[]],[[]],[[]],null,[[],["somhorizon",4]],[[],["exprext",3]],[[],["flags",3]],[[],["literal",3]],[[],["literals",3]],[[],["tune",4]],[[],["cpufeatures",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["somhorizon",4]],["ordering",4]],[[["flags",3]],["ordering",4]],[[["cpufeatures",3]],["ordering",4]],[[["builder",8]],[["database",3],["result",4,["database"]]]],[[]],[[]],[[],[["usize",15],["result",6,["usize"]]]],[[],["bool",15]],[[],["bool",15]],[[],["exprext",3]],[[],["flags",3]],[[]],[[],["cpufeatures",3]],[[],["errorref",3]],[[],["exprinforef",3]],[[]],[[],["platformref",3]],[[],["errorref",3]],[[],["exprinforef",3]],[[]],[[],["platformref",3]],[[],[["stdresult",4,["database"]],["database",3]]],[[["asref",8]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4,["u32"]],["u32",15]]],[[]],[[]],[[["error",4]],["bool",15]],[[["block",4]],["bool",15]],[[["vectored",4]],["bool",15]],[[["streaming",4]],["bool",15]],[[["error",4]],["bool",15]],[[],["bool",15]],[[["somhorizon",4]],["bool",15]],[[["exprext",3]],["bool",15]],[[["flags",3]],["bool",15]],[[["literal",3]],["bool",15]],[[["tune",4]],["bool",15]],[[["cpufeatures",3]],["bool",15]],[[],[["stream",3],["result",6,["stream"]]]],[[],[["usize",15],["option",4,["usize"]]]],null,null,null,[[["intoiterator",8]]],[[["intoiterator",8]]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["option",4,["platformref"]],["platformref",3]],[["database",3],["result",4,["database"]]]],[[["option",4,["platformref"]],["platformref",3]],[["database",3],["result",4,["database"]]]],[[["option",4,["platformref"]],["platformref",3]],[["database",3],["result",4,["database"]]]],[[["option",4,["platformref"]],["platformref",3]],[["database",3],["result",4,["database"]]]],[[]],[[]],[[["hs_error_t",6]]],[[]],[[]],[[]],[[["error",4]]],[[["nulerror",3]]],[[["error",4]]],[[]],[[["utf8error",3]]],[[["parseinterror",3]]],[[]],[[]],[[]],[[["hs_expr_ext_t",6]],["exprext",3]],[[]],[[]],[[]],[[["vec",3,["literal"]],["literal",3]],["literals",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u32",15]]],[[["u64",15]]],[[["u32",15]]],[[["u64",15]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["error",3]],[[],["exprinfo",3]],[[],["platform",3]],[[["str",15]],["result",6]],[[["str",15]],["result",6]],[[["str",15]],["result",6]],[[["str",15]],["result",6]],[[],[["option",4,["u32"]],["u32",15]]],[[]],[[]],[[],[["result",6,["platform"]],["platform",3]]],[[],["u32",15]],null,null,[[]],[[]],[[],[["string",3],["stdresult",4,["string"]]]],[[],[["string",3],["result",6,["string"]]]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["result",6]],[[]],null,null,[[],[["option",4,["u64"]],["u64",15]]],[[],["str",15]],[[],[["option",4,["u64"]],["u64",15]]],[[],[["option",4,["u64"]],["u64",15]]],[[]],[[],["str",15]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["exprext",3]],["bool",15]],[[["flags",3]],["bool",15]],[[["literal",3]],["bool",15]],[[["cpufeatures",3]],["bool",15]],[[["into",8,["string"]],["string",3]],[["literal",3],["result",6,["literal"]]]],[[["tune",4],["cpufeatures",3]],["platform",3]],[[]],[[]],[[],[["stream",3],["result",6,["stream"]]]],[[["somhorizon",4]],[["option",4,["ordering"]],["ordering",4]]],[[["flags",3]],[["option",4,["ordering"]],["ordering",4]]],[[["cpufeatures",3]],[["option",4,["ordering"]],["ordering",4]]],null,null,null,[[["scratch",3]],["result",6]],[[["scratch",3]],[["scratch",3],["result",6,["scratch"]]]],null,[[]],[[]],[[["scratchref",3]],["result",6]],[[["scratchref",3],["streamref",3]],["result",6]],[[["scratchref",3]],["result",6]],[[["scratchref",3]],["result",6]],[[["scratchref",3]],["result",6]],[[["scratchref",3]],["result",6]],[[["scratchref",3]],["result",6]],[[],[["result",6,["malloc"]],["malloc",3]]],[[["bool",15]]],[[["bool",15]]],[[["u32",15]]],[[["u32",15]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[]],[[],[["usize",15],["stdresult",4,["usize"]]]],[[],[["usize",15],["result",6,["usize"]]]],[[],[["usize",15],["result",6,["usize"]]]],null,null,[[],[["error",8],["option",4,["error"]]]],[[]],[[],[["usize",15],["result",6,["usize"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["scratch",3]],[[],["stream",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[],["version",3]],[[],["cstr",3]],[[["into",8,["string"]],["string",3],["flags",3]],[["literal",3],["result",6,["literal"]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["flags",3]]],[[]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["mode",4]],[[],["flags",3]],[[],["error",4]],[[]],[[]],[[]],[[["flags",3]],["ordering",4]],[[["builder",8]],[["database",3],["result",4,["database"]]]],[[]],[[],["bool",15]],[[]],[[],["flags",3]],[[],["compileerrorref",3]],[[],["compileerrorref",3]],[[]],[[]],[[]],[[],["bool",15]],[[["mode",4]],["bool",15]],[[["flags",3]],["bool",15]],[[["error",4]],["bool",15]],[[],[["usize",15],["option",4,["usize"]]]],null,[[["intoiterator",8]]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["mode",4],["platformref",3],["matchlimit",3],["option",4,["matchlimit"]],["option",4,["platformref"]]],[["database",3],["result",4,["database"]]]],[[]],[[]],[[]],[[]],[[["u32",15]],["option",4]],[[["u32",15]]],[[["u32",15]]],[[["intoiterator",8]]],[[],["compileerror",3]],[[["str",15]],["result",4]],[[]],null,[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["str",15]],[[["flags",3]],["bool",15]],[[]],[[["flags",3]],[["option",4,["ordering"]],["ordering",4]]],null,[[]],[[["bool",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],["cstr",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["scratch",3],["result",6,["scratch"]]]],[[],["databaseref",3]],[[],["scratchref",3]],[[]],[[]],[[],["databaseref",3]],[[],["scratchref",3]],[[]],[[],["databaseref",3]],[[]],[[]],[[]],[[]],[[],["scratchref",3]],[[]],[[]],[[]],[[]],[[],["databaseref",3]],[[]],[[]],[[]],[[]],[[]],[[],["scratchref",3]],[[]],[[]],[[]],[[]],[[],[["database",3],["result",4,["database"]]]],[[],[["database",3],["result",4,["database"]]]],[[],[["database",3],["result",4,["database"]]]],[[]],[[],["pattern",3]],[[],["patterns",3]],[[],["scratch",3]],[[],["matching",4]],[[],["capture",3]],[[]],[[]],[[]],[[]],[[]],[[["builder",8]],[["database",3],["result",4,["database"]]]],[[]],[[],["databaseref",3]],[[]],[[],["scratchref",3]],[[]],[[],["databaseref",3]],[[]],[[],["scratchref",3]],[[]],[[]],[[]],[[["error",4]],["bool",15]],[[["pattern",3]],["bool",15]],[[["matching",4]],["bool",15]],[[["capture",3]],["bool",15]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["mode",4],["platformref",3],["matchlimit",3],["option",4,["matchlimit"]],["option",4,["platformref"]]],[["database",3],["result",4,["database"]]]],[[["mode",4],["platformref",3],["matchlimit",3],["option",4,["matchlimit"]],["option",4,["platformref"]]],[["database",3],["result",4,["database"]]]],[[["mode",4],["platformref",3],["matchlimit",3],["option",4,["matchlimit"]],["option",4,["platformref"]]],[["database",3],["result",4,["database"]]]],[[]],[[]],[[]],[[["ch_error_t",6]]],[[]],[[]],[[["vec",3,["pattern"]],["pattern",3]],["patterns",3]],[[]],[[]],[[]],[[]],[[["ch_capture",3]],["capture",3]],[[["intoiterator",8]]],[[],["database",3]],[[],["scratch",3]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],null,[[]],[[]],[[],[["string",3],["result",6,["string"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[["error",4]],["bool",15]],[[["pattern",3]],["bool",15]],[[["capture",3]],["bool",15]],[[["into",8,["string"]],["string",3]],["pattern",3]],[[],[["usize",15],["range",3,["usize"]]]],[[["scratch",3]],[["scratch",3],["result",6,["scratch"]]]],[[["scratchref",3]],["result",6]],[[]],[[],[["usize",15],["result",6,["usize"]]]],[[],[["usize",15],["result",6,["usize"]]]],[[]],[[]],[[]],[[]],[[]],[[],["scratch",3]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["into",8,["string"]],["string",3],["flags",3]],["pattern",3]],[[],[["database",3],["result",4,["database"]]]],[[],[["database",3],["result",4,["database"]]]],[[],[["database",3],["result",4,["database"]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["databaseref",3]],[[],["scratchref",3]],[[],["streamref",3]],[[]],[[]],[[]],[[],["databaseref",3]],[[],["scratchref",3]],[[],["streamref",3]],[[]],[[]],[[["flags",3]]],[[]],[[],["u32",15]],[[]],[[]],[[]],[[],["databaseref",3]],[[]],[[]],[[]],[[]],[[]],[[],["scratchref",3]],[[],["streamref",3]],[[]],[[]],[[],["databaseref",3]],[[]],[[]],[[]],[[]],[[]],[[],["scratchref",3]],[[]],[[],["streamref",3]],[[],[["database",3],["result",4,["database"]]]],[[],[["database",3],["result",4,["database"]]]],[[],[["database",3],["result",4,["database"]]]],[[],[["database",3],["result",4,["database"]]]],[[]],[[],["flags",3]],[[],["pattern",3]],[[],["patterns",3]],[[],["matching",4]],[[],["scratch",3]],[[],["stream",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["scratchref",3]],["result",6]],[[["flags",3]],["ordering",4]],[[]],[[["builder",8]],[["database",3],["result",4,["database"]]]],[[["into",8,["string"]],["platformref",3],["string",3],["option",4,["platformref"]],["flags",3]],[["database",3],["error",4],["result",4,["database","error"]]]],[[["into",8,["string"]],["platformref",3],["literalflags",3],["string",3],["option",4,["platformref"]]],[["database",3],["error",4],["result",4,["database","error"]]]],[[]],[[],["bool",15]],[[],["flags",3]],[[]],[[],["databaseref",3]],[[]],[[],["scratchref",3]],[[],["streamref",3]],[[],["databaseref",3]],[[]],[[],["scratchref",3]],[[],["streamref",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["flags",3]],["bool",15]],[[["pattern",3]],["bool",15]],[[["matching",4]],["bool",15]],null,null,[[["intoiterator",8]]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["option",4,["platformref"]],["platformref",3]],[["database",3],["result",4,["database"]]]],[[["option",4,["platformref"]],["platformref",3]],[["database",3],["result",4,["database"]]]],[[["option",4,["platformref"]],["platformref",3]],[["database",3],["result",4,["database"]]]],[[]],[[]],[[]],[[]],[[["pattern",3],["vec",3,["pattern"]]],["patterns",3]],[[]],[[]],[[]],[[["u32",15]],["option",4]],[[["u32",15]]],[[["u32",15]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["database",3]],[[],["scratch",3]],[[],["stream",3]],[[["str",15]],["result",4]],[[["str",15]],["result",6]],[[["str",15]],["result",6]],[[["str",15]],["result",6]],[[]],null,[[]],[[]],[[],[["result",6,["exprinfo"]],["exprinfo",3]]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["flags",3]],["bool",15]],[[["pattern",3]],["bool",15]],[[["into",8,["string"]],["string",3]],[["result",6,["pattern"]],["pattern",3]]],[[]],[[["flags",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[]],[[["bool",15]]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[["into",8,["string"]],["string",3],["flags",3]],[["result",6,["pattern"]],["pattern",3]]],null,null,null,[[]],[[]],[[],["regex",3]],[[]],[[["str",15]],[["match",3],["option",4,["match"]]]],[[["str",15]],["matches",3]],[[]],[[["str",15]],[["regex",3],["result",6,["regex"]]]],[[]],[[["str",15]],["bool",15]],[[["into",8,["string"]],["string",3]],[["regex",3],["result",6,["regex"]]]],[[["str",15]],["split",3]],[[["usize",15],["str",15]],["splitn",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"CpuFeatures"],[4,"HsError"],[4,"Tune"],[3,"LiteralFlags"],[4,"Error"],[4,"Matching"],[8,"Builder"],[8,"SerializedDatabase"],[4,"SomHorizon"],[3,"DatabaseRef"],[3,"Platform"],[3,"CompileError"],[3,"ExprInfo"],[4,"BlockMode"],[4,"VectoredMode"],[4,"StreamingMode"],[3,"ExprExt"],[3,"Literal"],[3,"Literals"],[3,"PlatformRef"],[3,"ScratchRef"],[3,"StreamRef"],[3,"Pattern"],[8,"MatchEventHandler"],[13,"Hyperscan"],[13,"Chimera"],[13,"Expr"],[13,"Utf8"],[13,"ParseInt"],[13,"NulByte"],[13,"InvalidFlag"],[13,"CompileError"],[13,"Code"],[4,"Error"],[3,"Flags"],[4,"Matching"],[8,"Builder"],[4,"Mode"],[4,"MatchError"],[3,"CompileError"],[3,"Pattern"],[8,"MatchEventHandler"],[8,"ErrorEventHandler"],[13,"CompileError"],[13,"Code"],[3,"DatabaseRef"],[3,"Database"],[3,"Scratch"],[3,"Patterns"],[3,"ScratchRef"],[3,"Capture"],[3,"CompileFlags"],[8,"Mode"],[3,"Database"],[3,"Scratch"],[3,"Stream"],[3,"Patterns"],[3,"Regex"]]},\
"hyperscan_sys":{"doc":"Hyperscan is a software regular expression matching engine …","t":[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,6,5,5,5,3,6,5,5,5,5,5,5,3,5,5,6,5,5,6,5,3,6,3,6,5,5,5,5,5,6,5,3,6,5,5,5,5,5,5,5,3,5,6,5,5,5,5,5,5,5,5,3,5,6,5,5,11,11,11,11,11,11,11,6,12,12,12,12,12,12,12,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,11,11,11,11,11,11,11,11,11,11,5,6,6,3,6,5,5,3,6,5,5,3,5,5,6,6,6,6,5,5,5,6,6,5,3,5,6,5,5,5,5,5,11,11,11,11,11,12,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,3,6,11,11,11,11,11,12,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11],"n":["HS_ARCH_ERROR","HS_BAD_ALIGN","HS_BAD_ALLOC","HS_COMPILER_ERROR","HS_CPU_FEATURES_AVX2","HS_CPU_FEATURES_AVX512","HS_CPU_FEATURES_AVX512VBMI","HS_DB_MODE_ERROR","HS_DB_PLATFORM_ERROR","HS_DB_VERSION_ERROR","HS_EXT_FLAG_EDIT_DISTANCE","HS_EXT_FLAG_HAMMING_DISTANCE","HS_EXT_FLAG_MAX_OFFSET","HS_EXT_FLAG_MIN_LENGTH","HS_EXT_FLAG_MIN_OFFSET","HS_FLAG_ALLOWEMPTY","HS_FLAG_CASELESS","HS_FLAG_COMBINATION","HS_FLAG_DOTALL","HS_FLAG_MULTILINE","HS_FLAG_PREFILTER","HS_FLAG_QUIET","HS_FLAG_SINGLEMATCH","HS_FLAG_SOM_LEFTMOST","HS_FLAG_UCP","HS_FLAG_UTF8","HS_INSUFFICIENT_SPACE","HS_INVALID","HS_MAJOR","HS_MINOR","HS_MODE_BLOCK","HS_MODE_NOSTREAM","HS_MODE_SOM_HORIZON_LARGE","HS_MODE_SOM_HORIZON_MEDIUM","HS_MODE_SOM_HORIZON_SMALL","HS_MODE_STREAM","HS_MODE_VECTORED","HS_NOMEM","HS_OFFSET_PAST_HORIZON","HS_PATCH","HS_SCAN_TERMINATED","HS_SCRATCH_IN_USE","HS_SUCCESS","HS_TUNE_FAMILY_BDW","HS_TUNE_FAMILY_GENERIC","HS_TUNE_FAMILY_GLM","HS_TUNE_FAMILY_HSW","HS_TUNE_FAMILY_ICL","HS_TUNE_FAMILY_ICX","HS_TUNE_FAMILY_IVB","HS_TUNE_FAMILY_SKL","HS_TUNE_FAMILY_SKX","HS_TUNE_FAMILY_SLM","HS_TUNE_FAMILY_SNB","HS_UNKNOWN_ERROR","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chimera","clone","clone","clone","clone","clone","clone","clone","cpu_features","default","default","default","default","edit_distance","eq","eq","eq","eq","expression","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","hamming_distance","hs_alloc_scratch","hs_alloc_t","hs_clone_scratch","hs_close_stream","hs_compile","hs_compile_error","hs_compile_error_t","hs_compile_ext_multi","hs_compile_lit","hs_compile_lit_multi","hs_compile_multi","hs_compress_stream","hs_copy_stream","hs_database","hs_database_info","hs_database_size","hs_database_t","hs_deserialize_database","hs_deserialize_database_at","hs_error_t","hs_expand_stream","hs_expr_ext","hs_expr_ext_t","hs_expr_info","hs_expr_info_t","hs_expression_ext_info","hs_expression_info","hs_free_compile_error","hs_free_database","hs_free_scratch","hs_free_t","hs_open_stream","hs_platform_info","hs_platform_info_t","hs_populate_platform","hs_reset_and_copy_stream","hs_reset_and_expand_stream","hs_reset_stream","hs_scan","hs_scan_stream","hs_scan_vector","hs_scratch","hs_scratch_size","hs_scratch_t","hs_serialize_database","hs_serialized_database_info","hs_serialized_database_size","hs_set_allocator","hs_set_database_allocator","hs_set_misc_allocator","hs_set_scratch_allocator","hs_set_stream_allocator","hs_stream","hs_stream_size","hs_stream_t","hs_valid_platform","hs_version","into","into","into","into","into","into","into","match_event_handler","matches_at_eod","matches_only_at_eod","max_offset","max_width","message","min_length","min_offset","min_width","ne","ne","ne","ne","reserved1","reserved2","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tune","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unordered_matches","CH_BAD_ALIGN","CH_BAD_ALLOC","CH_CALLBACK_CONTINUE","CH_CALLBACK_SKIP_PATTERN","CH_CALLBACK_TERMINATE","CH_CAPTURE_FLAG_ACTIVE","CH_CAPTURE_FLAG_INACTIVE","CH_COMPILER_ERROR","CH_DB_MODE_ERROR","CH_DB_PLATFORM_ERROR","CH_DB_VERSION_ERROR","CH_ERROR_MATCHLIMIT","CH_ERROR_RECURSIONLIMIT","CH_FAIL_INTERNAL","CH_FLAG_CASELESS","CH_FLAG_DOTALL","CH_FLAG_MULTILINE","CH_FLAG_SINGLEMATCH","CH_FLAG_UCP","CH_FLAG_UTF8","CH_INVALID","CH_MODE_GROUPS","CH_MODE_NOGROUPS","CH_NOMEM","CH_SCAN_TERMINATED","CH_SCRATCH_IN_USE","CH_SUCCESS","CH_UNKNOWN_HS_ERROR","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ch_alloc_scratch","ch_alloc_t","ch_callback_t","ch_capture","ch_capture_t","ch_clone_scratch","ch_compile","ch_compile_error","ch_compile_error_t","ch_compile_ext_multi","ch_compile_multi","ch_database","ch_database_info","ch_database_size","ch_database_t","ch_error_event_handler","ch_error_event_t","ch_error_t","ch_free_compile_error","ch_free_database","ch_free_scratch","ch_free_t","ch_match_event_handler","ch_scan","ch_scratch","ch_scratch_size","ch_scratch_t","ch_set_allocator","ch_set_database_allocator","ch_set_misc_allocator","ch_set_scratch_allocator","ch_version","clone","clone","clone","clone","clone","cpu_features","default","default","default","eq","eq","eq","expression","flags","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hs_platform_info","hs_platform_info_t","into","into","into","into","into","message","ne","ne","ne","reserved1","reserved2","to","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","tune","type_id","type_id","type_id","type_id","type_id"],"q":["hyperscan_syshyperscan_sys::chimera","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Chimera is a software regular expression matching engine …","","","","","","","","Relevant CPU features available on the target platform","","","","","Allow patterns to approximately match within this edit …","","","","","The zero-based number of the expression that caused the …","Flags governing which parts of this structure are to be …","","","","","","","","","","","","","","","Allow patterns to approximately match within this Hamming …","Allocate a “scratch” space for use by Hyperscan.","The type of the callback function that will be used by …","Allocate a scratch space that is a clone of an existing …","Close a stream.","The basic regular expression compiler.","A type containing error details that is returned by the …","A type containing error details that is returned by the …","The multiple regular expression compiler with extended …","The basic pure literal expression compiler.","The multiple pure literal expression compiler.","The multiple regular expression compiler.","Creates a compressed representation of the provided stream …","Duplicate the given stream. The new stream will have the …","","Utility function providing information about a database.","Provides the size of the given database in bytes.","A Hyperscan pattern database.","Reconstruct a pattern database from a stream of bytes …","Reconstruct a pattern database from a stream of bytes …","A type for errors returned by Hyperscan functions.","Decompresses a compressed representation created by @ref …","A structure containing additional parameters related to an …","A structure containing additional parameters related to an …","A type containing information related to an expression …","A type containing information related to an expression …","Utility function providing information about a regular …","Utility function providing information about a regular …","Free an error structure generated by @ref hs_compile(), …","Free a compiled pattern database.","Free a scratch block previously allocated by @ref …","The type of the callback function that will be used by …","Open and initialise a stream.","A type containing information on the target platform which …","A type containing information on the target platform which …","Populates the platform information based on the current …","Duplicate the given ‘from’ stream state onto the ‘to…","Decompresses a compressed representation created by @ref …","Reset a stream to an initial state.","The block (non-streaming) regular expression scanner.","Write data to be scanned to the opened stream.","The vectored regular expression scanner.","","Provides the size of the given scratch space.","A Hyperscan scratch space.","Serialize a pattern database to a stream of bytes.","Utility function providing information about a serialized …","Utility function for reporting the size that would be …","Set the allocate and free functions used by Hyperscan for …","Set the allocate and free functions used by Hyperscan for …","Set the allocate and free functions used by Hyperscan for …","Set the allocate and free functions used by Hyperscan for …","Set the allocate and free functions used by Hyperscan for …","Definition of the stream identifier type.","Provides the size of the stream state allocated by a …","The stream identifier returned by @ref hs_open_stream().","Utility function to test the current system architecture.","Utility function for identifying this release version.","","","","","","","","Definition of the match event callback function type.","Whether this expression can produce matches at end of data …","Whether this expression can <em>only</em> produce matches at end of …","The maximum end offset in the data stream at which this …","The maximum length in bytes of a match for the pattern. If …","A human-readable error message describing the error.","The minimum match length (from start to end) required to …","The minimum end offset in the data stream at which this …","The minimum length in bytes of a match for the pattern.","","","","","Reserved for future use.","Reserved for future use.","","","","","","","","","","","","","","","Information about the target platform which may be used to …","","","","","","","","Whether this expression can produce matches that are not …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allocate a “scratch” space for use by Chimera.","The type of the callback function that will be used by …","Callback return value used to tell the Chimera matcher …","Structure representing a captured subexpression within a …","Structure representing a captured subexpression within a …","Allocate a scratch space that is a clone of an existing …","The basic regular expression compiler.","A type containing error details that is returned by the …","A type containing error details that is returned by the …","The multiple regular expression compiler with extended …","The multiple regular expression compiler.","","Utility function providing information about a database.","Returns the size of the given database.","A Chimera pattern database.","Definition of the Chimera error event callback function …","Type used to differentiate the errors raised with the @ref …","A type for errors returned by Chimera functions.","Free an error structure generated by @ref ch_compile(), …","Free a compiled pattern database.","Free a scratch block previously allocated by @ref …","The type of the callback function that will be used by …","Definition of the match event callback function type.","The block regular expression scanner.","","Provides the size of the given scratch space.","A Chimera scratch space.","Set the allocate and free functions used by Chimera for …","Set the allocate and free functions used by Chimera for …","Set the allocate and free functions used by Chimera for …","Set the allocate and free functions used by Chimera for …","Utility function for identifying this release version.","","","","","","Relevant CPU features available on the target platform","","","","","","","The zero-based number of the expression that caused the …","The flags indicating if this structure is active.","","","","","","","","","","","offset at which this capture group begins.","A type containing information on the target platform which …","A type containing information on the target platform which …","","","","","","A human-readable error message describing the error.","","","","Reserved for future use.","Reserved for future use.","offset at which this capture group ends.","","","","","","","","","","","Information about the target platform which may be used to …","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,3,2,3,4,5,5,2,3,4,5,2,5,1,2,3,4,5,6,7,1,2,3,4,5,6,7,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,0,4,4,5,4,2,5,5,4,2,3,4,5,3,3,1,2,3,4,5,6,7,1,2,3,4,5,6,7,3,1,2,3,4,5,6,7,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,9,10,11,12,8,9,10,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,9,10,11,12,9,9,10,12,9,10,12,10,12,8,9,10,11,12,8,9,10,11,12,12,0,0,8,9,10,11,12,10,9,10,12,9,9,12,8,9,10,11,12,8,9,10,11,12,9,8,9,10,11,12],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["hs_database",3]],[[],["hs_compile_error",3]],[[],["hs_platform_info",3]],[[],["hs_expr_info",3]],[[],["hs_expr_ext",3]],[[],["hs_stream",3]],[[],["hs_scratch",3]],null,[[]],[[],["hs_platform_info",3]],[[],["hs_expr_info",3]],[[],["hs_expr_ext",3]],null,[[["hs_compile_error",3]],["bool",15]],[[["hs_platform_info",3]],["bool",15]],[[["hs_expr_info",3]],["bool",15]],[[["hs_expr_ext",3]],["bool",15]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[["hs_compile_error",3]],["bool",15]],[[["hs_platform_info",3]],["bool",15]],[[["hs_expr_info",3]],["bool",15]],[[["hs_expr_ext",3]],["bool",15]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["ch_database",3]],[[],["hs_platform_info",3]],[[],["ch_compile_error",3]],[[],["ch_scratch",3]],[[],["ch_capture",3]],null,[[],["hs_platform_info",3]],[[]],[[],["ch_capture",3]],[[["hs_platform_info",3]],["bool",15]],[[["ch_compile_error",3]],["bool",15]],[[["ch_capture",3]],["bool",15]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],null,[[["hs_platform_info",3]],["bool",15]],[[["ch_compile_error",3]],["bool",15]],[[["ch_capture",3]],["bool",15]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"hs_database"],[3,"hs_compile_error"],[3,"hs_platform_info"],[3,"hs_expr_info"],[3,"hs_expr_ext"],[3,"hs_stream"],[3,"hs_scratch"],[3,"ch_database"],[3,"hs_platform_info"],[3,"ch_compile_error"],[3,"ch_scratch"],[3,"ch_capture"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};